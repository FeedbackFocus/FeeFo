@using Blazorise.Charts;
@using FeedbackFocus.Services
@inject CourseService _courseService;

<div class="@CSSStyles.graphStyles">

    <Blazorise.Charts.Chart @ref="pieChart" Type="Blazorise.Charts.ChartType.Pie" TItem="double" Options="@chartOptions" />
    @*<Button Color="Color.Primary" Outline Clicked="@(async () => await HandleRedraw( pieChart, GetPieChartDataset ))">Redraw</Button>*@
</div>

@code {
    private Blazorise.Charts.Chart<double> pieChart;

    Blazorise.Charts.ChartOptions chartOptions = new()
        {
            AspectRatio = 1.5,
            Plugins = new()
            {
                Title = new()
                {
                    Text = "Emotion in Course Feedback",
                    Position = "top",
                    Display = true,
                    Font = new()
                    {
                        Size = 24
                    },

                },
                Legend = new()
                {
                    Display = true
                }
            }
        };

    private string[] Labels;
    private List<string> backgroundColors = new() { ChartColor.FromRgba(255, 99, 132, 0.8f), ChartColor.FromRgba(54, 162, 235, 0.8f), ChartColor.FromRgba(255, 206, 86, 0.8f), ChartColor.FromRgba(75, 192, 192, 0.8f), ChartColor.FromRgba(153, 102, 255, 0.8f), ChartColor.FromRgba(255, 159, 64, 0.8f), ChartColor.FromRgba(255, 70, 100, 0.8f) };
    private List<string> borderColors = new() { ChartColor.FromRgba(255, 99, 132, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(255, 159, 64, 1f), ChartColor.FromRgba(255, 70, 100, 1f) };

    private bool isAlreadyInitialised;

    private Random random = new(42);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!isAlreadyInitialised)
        {
            isAlreadyInitialised = true;

            await HandleRedraw(pieChart, GetPieChartDataset);
        }
    }

    private async Task HandleRedraw<TDataSet, TItem, TOptions, TModel>(Blazorise.Charts.BaseChart<TDataSet, TItem, TOptions, TModel> chart, Func<TDataSet> getDataSet)
        where TDataSet : ChartDataset<TItem>
        where TOptions : ChartOptions
        where TModel : ChartModel
    {
        await chart.Clear();
       var crs = _courseService.GetCourses();
        await chart.AddLabelsDatasetsAndUpdate(Labels, getDataSet());
    }

    private int pieLabel;

    private PieChartDataset<double> GetPieChartDataset()
    {
        return new()
            {
                Label = $"#{++pieLabel} of randoms",
                Data = RandomizeData(),
                BackgroundColor = backgroundColors,
                BorderColor = borderColors,
                BorderWidth = 1
            };
    }

    List<double> RandomizeData() => RandomizeData(3, 50);

    List<double> RandomizeData(int min, int max)
    {
        return Enumerable.Range(0, 7).Select(x => random.Next(min, max) * random.NextDouble()).ToList();
    }
}