@using FeedbackFocus.Models;
@inject FeedbackFocus.Services.CourseService _courseService;

<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add New Course</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="() => Close()">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
               @* <p>Modal body text goes here.</p>*@
                <form>
                    <div class="mb-3">
                        <label for="Name" class="form-label">Name</label>
                        <input type="text" class="form-control" id="Name" placeholder="Enter course name" @bind-value="@course.Name">
                    </div>
                    
                    <div class="mb-3">
                        <label for="CourseCode" class="form-label">Course Code</label>
                        <input type="text" class="form-control" id="CourseCode" placeholder="Enter course code" @bind-value="@course.CourseCode">
                    </div>
             
                    <div class="mb-3">
                        <label for="Year" class="form-label">Year</label>
                        <input type="number" class="form-control" id="Year" placeholder="Enter year" @bind-value="@course.Year">
                    </div>
                    <div class="mb-3">

                        <label for="Semester" class="form-label">Semester</label>
                        <select id="Semester" @bind="course.Semester" class="form-control">
                            @foreach (var semester in Enum.GetValues(typeof(Semester)))
                            {
                                <option value="@semester">@semester</option>
                            }
                        </select>
                    </div>

                   @* <!-- Assuming each assignment just has a name -->
                    <div id="Assignments">
                        <h3>Assignments</h3>
                        <div class="mb-3">
                            <label for="Assignment1" class="form-label">Assignment 1</label>
                            <input type="text" class="form-control" id="Assignment1" placeholder="Enter assignment name">
                        </div>
                        <!-- Repeat the above block for each assignment you wish to include -->
                    </div>*@
                </form>

               @* <p>Modal body text goes here.</p>*@
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="() => AddCourse()">Add</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close()">Cancel</button>
            </div>
        </div>
    </div>
</div>


@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}


@code {
    private Course course = new();
    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    [Parameter]
    public EventCallback OnClose { get; set; }

    public void Open()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        OnClose.InvokeAsync(null);
        StateHasChanged();
    }

    private async void AddCourse()
    {
        await _courseService.AddCourse(course);
        Close();
        course = new();
        StateHasChanged();
    }
}