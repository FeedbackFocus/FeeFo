@using FeedbackFocus.Models;
@inject FeedbackFocus.Services.CourseService _courseService;
@inject FeedbackFocus.Services.AnalysisItemService _analysisService;
@inject FeedbackFocus.Services.FeedbackService _feedbackService;
@inject FeedbackFocus.Services.AssessmentService _assignmentService;

<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add New Course</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="() => Close()">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @* <p>Modal body text goes here.</p>*@
                <form>
                    <div class="mb-3">
                        <p>Are you sure you wish to delete this record?</p>
                    </div>
                </form>


                @* <p>Modal body text goes here.</p>*@
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" @onclick="Delete">Delete</button>
                <button type="button" class="btn btn-secondary" @onclick="Close">Cancel</button>
            </div>
        </div>
    </div>
</div>


@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}


@code {
    private dynamic deleteItem = null;
    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    [Parameter]
    public EventCallback OnClose { get; set; }

    public void Open()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    private void Delete()
    {
        if(deleteItem is Course)
        {
            _courseService.Delete(deleteItem.Id);

        } else if (deleteItem is Assessment)
        {
            _assignmentService.Delete(deleteItem.Id);
        } else if(deleteItem is FeedbackItem)
        {
            _feedbackService.Delete(deleteItem.Id);
        } else if(deleteItem is AnalysisItem)
        {
            _analysisService.Delete(deleteItem.Id);
        } else
        {
            throw new Exception("Type wasn't found for Delete operation.");
        }
        Close();
    }

    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        OnClose.InvokeAsync(null);
        StateHasChanged();
    }
    public void SetObject(dynamic obj)
    {
        deleteItem = obj;
        
    }

   
}