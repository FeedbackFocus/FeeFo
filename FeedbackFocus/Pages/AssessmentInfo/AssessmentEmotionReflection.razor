@page "/AssessmentEmotionInfo"
@using System.Collections;
@using CsvHelper;
@using BlazorBootstrap
@using System.Globalization;
@using CsvHelper.Configuration;
@using FeedbackFocus.Components.FileParsing
@using FeedbackFocus.Models;
@using Microsoft.VisualBasic.FileIO;


@inject FeedbackFocus.Services.AssessmentDashboardService _assessmentDashboardService;


<div class="d-flex align-items-center">
    <button class="btn" onclick="window.history.back();">
        <span class="oi oi-arrow-thick-left" aria-hidden="true"></span>
    </button>
    <h3 class="mb-0 ml-2">Assessment Feedback</h3>
</div>

@foreach (var course in _assessmentDashboardService.CourseData)
{
    @foreach (var assessment in course.Assessments)
    {
        <h4>Assessment: @assessment.Name</h4>

        <BlazorBootstrap.Grid TItem="FeedbackItem"
                              Class="table table-hover table-bordered table-striped"
                              Data="assessment.Feedback"
                              AllowFiltering="false"
                              AllowPaging="false"
                     
                              AllowSorting="true"
                              AllowSelection="false"
                              SelectionMode="GridSelectionMode.Multiple"
                              Responsive="true">
            <GridColumns>
                <GridColumn TItem="FeedbackItem" HeaderText="Username" PropertyName="Username" SortKeySelector="item => item.Username">
                    @context.Username
                </GridColumn>
                <GridColumn TItem="FeedbackItem" HeaderText="Grade" PropertyName="Grade" SortKeySelector="item => item.Grade">
                    @context.Grade
                </GridColumn>
                <GridColumn TItem="FeedbackItem" HeaderText="Feedback" PropertyName="Feedback" SortKeySelector="item => item.FeedbackToLearner">
                    @context.FeedbackToLearner
                </GridColumn>
                <GridColumn TItem="FeedbackItem" HeaderText="Feedback" PropertyName="FeedbackToLearner">
                    @{
                        var emotionLabel = context.Analysis?
                        .Where(x => x.AnalysisType == "emotion")
                        .OrderByDescending(x => x.Value)
                        .FirstOrDefault()?.Label ?? "No Analysis";
                    }
                    @emotionLabel
                </GridColumn>



            </GridColumns>

        </BlazorBootstrap.Grid>
    }
}










@code {
    public bool ShowBackdrop = false;
    bool analysis = false;
    [Parameter]
    public string AssessmentId { get; set; }
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    List<FeedbackItem> lstItems = new();
    List<AnalysisItem> lstAnalysis = new();
    private FeedbackItem? currentFeedbackItem = null;
    private FeedbackFocus.Components.AddFeedbackItemModal Modal { get; set; }
    private FeedbackFocus.Components.EditFeedbackItemModal EditModal { get; set; }




    protected override async Task OnInitializedAsync()
    {

        base.OnInitializedAsync();


        StateHasChanged();


    }
}
