@page "/courseFeedbackInfo"
@using System.Collections;
@using CsvHelper;
@using System.Globalization;
@using CsvHelper.Configuration;
@using FeedbackFocus.Components.FileParsing
@using FeedbackFocus.Models;
@using Microsoft.VisualBasic.FileIO;
@using BlazorBootstrap



@inject FeedbackFocus.Services.CourseDashboardService _courseDashboardService;


<div class="d-flex align-items-center">
    <button class="btn" onclick="window.history.back();">
        <span class="oi oi-arrow-thick-left" aria-hidden="true"></span>
    </button>
    <h3 class="mb-0 ml-2">Course Feedback</h3>
</div>



 


                <BlazorBootstrap.Grid TItem="FeedbackItem"
                                      Class="table table-hover table-bordered table-striped"
                          Data="FlattenedFeedback"
                                      AllowFiltering="false"
                                      AllowPaging="false"
                                      AllowSorting="true"
                                      AllowSelection="false"
                                      SelectionMode="GridSelectionMode.Multiple"
                                      Responsive="true">
                    <GridColumns>
                        <GridColumn TItem="FeedbackItem" HeaderText="Username" PropertyName="Username" SortKeySelector="item => item.Username">
                            @context.Username
                        </GridColumn>
                        <GridColumn TItem="FeedbackItem" HeaderText="Grade" PropertyName="Grade" SortKeySelector="item => item.Grade">
                            @context.Grade
                        </GridColumn>
                        <GridColumn TItem="FeedbackItem" HeaderText="Feedback" PropertyName="Feedback" SortKeySelector="item => item.FeedbackToLearner">
                            @context.FeedbackToLearner
                        </GridColumn>
                    </GridColumns>

                </BlazorBootstrap.Grid>
        
            
    
    










@code {
    private List<FeedbackItem> FlattenedFeedback = new();
    public bool ShowBackdrop = false;
    bool analysis = false;
    [Parameter]
    public string AssessmentId { get; set; }
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    List<FeedbackItem> lstItems = new();
    List<AnalysisItem> lstAnalysis = new();
    private FeedbackItem? currentFeedbackItem = null;
    private FeedbackFocus.Components.AddFeedbackItemModal Modal { get; set; }
    private FeedbackFocus.Components.EditFeedbackItemModal EditModal { get; set; }
   


    private async Task RefreshFeedback()
    {
       // lstItems = (await _courseDashboardService;


        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitializedAsync();
        //lstItems = await _feedbackService.GetFeedback();
        lstItems = lstItems.Where(x => x.AssessmentId.ToString() == this.AssessmentId).ToList();
        FlattenedFeedback = _courseDashboardService.CompleteCourseData
           .SelectMany(course => course.Assessments)
           .SelectMany(assessment => assessment.Feedback)
           .ToList();
        StateHasChanged();


    }

}
