@page "/courseAssessmentWordsInfo"
@using System.Collections;
@using CsvHelper;
@using System.Globalization;
@using CsvHelper.Configuration;
@using FeedbackFocus.Components.FileParsing;
@using FeedbackFocus.Models;
@using Microsoft.VisualBasic.FileIO;
@using BlazorBootstrap

@inject FeedbackFocus.Services.CourseDashboardService _courseDashboardService;

<div class="d-flex align-items-center">
    <button class="btn" onclick="window.history.back();">
        <span class="oi oi-arrow-thick-left" aria-hidden="true"></span>
    </button>
    <h3 class="mb-0 ml-2">Course Feedback Statistics</h3>
</div>

@foreach (var course in _courseDashboardService.CompleteCourseData)
{
    // Aggregate all feedback word counts across all assessments within the course
    var feedbackWordCounts = course.Assessments
        .SelectMany(a => a.Feedback)
        .Select(f => f.FeedbackToLearner.Split(' ').Length)
        .ToList();

    var averageWords = feedbackWordCounts.Any() ? Math.Round((decimal)feedbackWordCounts.Average(), 2) : 0;
    var minWords = feedbackWordCounts.Any() ? feedbackWordCounts.Min() : 0;
    var maxWords = feedbackWordCounts.Any() ? feedbackWordCounts.Max() : 0;
    var variance = feedbackWordCounts.Any() ? feedbackWordCounts.Average(v => Math.Pow(v - feedbackWordCounts.Average(), 2)) : 0;
    var standardDeviationWords = Math.Round((decimal)Math.Sqrt(variance), 2);

    <h4>Course: @course.Name</h4>
    <table class="table table-striped table-bordered table-hover table-sm">
        <thead class="thead-dark">
            <tr>
                <th>Average Words</th>
                <th>Minimum Words</th>
                <th>Maximum Words</th>
                <th>Standard Deviation</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@averageWords</td>
                <td>@minWords</td>
                <td>@maxWords</td>
                <td>@standardDeviationWords</td>
            </tr>
        </tbody>
    </table>

   <BlazorBootstrap.Grid TItem="FlattenedFeedbackItem"
                      Class="table table-hover table-bordered table-striped"
                      Data="@FlattenedFeedback"
                      AllowFiltering="false"
                      AllowPaging="false"
                      AllowSorting="true"
                      AllowSelection="false"
                      Responsive="true">
    <GridColumns>
        <GridColumn TItem="FlattenedFeedbackItem" HeaderText="Assessment" PropertyName="AssessmentName" SortKeySelector="item => item.AssessmentName">
            @context.AssessmentName
        </GridColumn>
        <GridColumn TItem="FlattenedFeedbackItem" HeaderText="Username" PropertyName="Username" SortKeySelector="item => item.Username">
            @context.Username
        </GridColumn>
        <GridColumn TItem="FlattenedFeedbackItem" HeaderText="Feedback" PropertyName="FeedbackToLearner" SortKeySelector="item => item.FeedbackToLearner">
            @((MarkupString)context.FeedbackToLearner)
        </GridColumn>
    </GridColumns>
</BlazorBootstrap.Grid>
}

@code{
    private List<FlattenedFeedbackItem> FlattenedFeedback = new();
    public class FlattenedFeedbackItem
    {
        public string AssessmentName { get; set; }
        public string Username { get; set; }
        public string FeedbackToLearner { get; set; }
    }
    
    protected override void OnInitialized()
    {
        FlattenedFeedback = _courseDashboardService.CompleteCourseData
            .SelectMany(course => course.Assessments)
            .SelectMany(assessment => assessment.Feedback.Select(feedback => new FlattenedFeedbackItem
                {
                    AssessmentName = assessment.Name,
                    Username = feedback.Username,
                    FeedbackToLearner = feedback.FeedbackToLearner
                }))
            .ToList();
    }

}
